source('~/Downloads/r Programming/programming2/cachematrix.R')
> x = rbind(c(5,10),c(10,5))
> x <-  rbind(c(5,10),c(10,5))
x <-  rbind(c(5,10),c(10,5))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/cachematrix.R')
source('~/Downloads/r Programming/programming2/cachematrix.R')
source('~/Downloads/r Programming/programming2/cachematrix.R')
cacheSolve(m)
source('~/Downloads/r Programming/programming2/cachematrix.R')
cacheSolve(m)
cacheSolve(m)
m
m
m = makeCacheMatrix(x)
cacheSolve(m)
m = makeCacheMatrix(x)
m <- makeCacheMatrix(x)
m
cacheSolve(m)
cacheSolve(m)
m
source('~/Downloads/r Programming/programming2/cachematrix.R')
x <-  rbind(c(5,10),c(10,5))
m = makeCacheMatrix(x)
source('~/Downloads/r Programming/programming2/cachematrix.R')
m = makeCacheMatrix(x)
m$get(m)
m$get()
cacheSolve(m)
cacheSolve(m)
x <-  rbind(c(10,20),c(20,10))
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
m$get()
m$get()
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/cachematrix.R')
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/cachematrix.R')
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/cachematrix.R')
source('~/Downloads/r Programming/programming2/cachematrix.R')
m = makeCacheMatrix(x)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/cachematrix.R')
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
x <-  rbind(c(4, 2),c(2, 4))
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
x <-  rbind(c(4, 2),c(2, 4))
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
x <-  rbind(c(5, 2),c(2, 5)
m = makeCacheMatrix(x)
x <-  rbind(c(5, 2),c(2, 5))
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
x <-  rbind(c(5, 2, 3),c(2, 5, 3), c(2, 3, 5))
x
cacheSolve(m)
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
source('~/Downloads/r Programming/programming2/ProgrammingAssignment2/cachematrix.R')
setwd("~/Downloads/r Programming/programming2")
source('~/Downloads/r _Programming/r_programming2/programming2/cachematrix.R')
source('~/Downloads/r _Programming/r_programming2/programming2/cachematrix.R')
x  <- c(10, 20), c(30, 10)
x  <- rbind(c(10, 20), c(30, 10)
)
x
makeCacheMatrix((x))
makeCacheMatrix(x)
cacheSole(x)
cacheSolve(x)
cacheSolve(m)
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
source('~/Downloads/r _Programming/r_programming2/programming2/cachematrix.R')
source('~/Downloads/r _Programming/r_programming2/programming2/cachematrix.R')
m <- makeCacheMatrix(x)
source('~/Downloads/r _Programming/r_programming2/programming2/cachematrix.R')
cacheSolve(m)
cacheSolve(m)
load.packages("ggis")
install.packages("ggis")
install.packages("ggvis")
require("ggis")
require("ggvis")
?ggvis
install.packages("EDWAR")
install.packages("EDAWR")
install.packages("EDAWR")
tb
install.packages(("EDAWR"))
install.packages(("EDAWR"))
??EDAWR
??nycflights13
install.packages("nycflights13")
flightss
flights
require("nycflights13")
fiights
?flights
data(flights)
flights
View(flights)
glympse(flights)
?glympse
require(dplyr)
glympse(flights)
??glympse
glimpse(flights)
glimpse(flights)
flights
install.packages(("EDAWR"))
library("fun", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
mine_sweeper()
?mine_sweeper
X11(type = 'Xlib')
mine_sweeper()
X11(type = 'Xlib')
mine_sweeper()
mine_sweeper()
mine_sweeper()
mine_sweeper()
?fun
source('~/Downloads/r _Programming/jc.R')
source('~/Downloads/r _Programming/jc.R')
source('~/Downloads/r _Programming/jc.R')
source('~/Downloads/r _Programming/jc.R')
require(knitr)
?"knitr
?knitr
require(knitr)
?knitr
install.packages(tex)
require(tex)
install.packages("latex")
analysis might start with loading packages, and so the following
\documentclass{article}
\begin{document}
\section*{\textbf{0 to knitr in 60 seconds}}
\noindent All code in \texttt{knitr} is run in grouped 'chunks' of
code that perform specific parts of the analysis. Typically an
analysis might start with loading packages, and so the following
chunk does that.
<<loadPackages>>=
library(xtable)
@
\noindent Inside the \verb+<<...>>=+  options can be set that control how
and what is to be displayed within the chunk. In this case, the on
ly thing provided is the chunk name that has been set to
\texttt{loadPackages}', although chunk names are not strictly
required.\\
\noindent Next, some data is generated and a linear model is
fitted. The chunk will be called \texttt{doLinearModel}.
<<doLinearModel, cache = TRUE>>=
x<-rnorm(100)
y<-3*x + 0.5 + rnorm(100)
lm1<-lm(y~x)
@
\noindent The \texttt{cache = TRUE} option tell knitr that you want
to store the results of the R code inside the chunk. This will
result in a new directory called 'cache' being created inside the
current working directory where all of the chunk data will be put.
When the document is subsequently compiled again, the cached R
data will be used provided that neither the chunk contents or
options have not changed since the last compile. If any changes
have been made, the cache will be rebuilt. \textbf{Important note}:
\textit{any} small change to a chunk (including insertion of space
s) will result in cache rebuilds, so it is important to avoid
making accidental changes to time consuming chunks. We can evaluate
R objects and perform simple operations in the text body, for exam
ple the largest values of \texttt{x} using \Sexpr{max(x)}.\\
\noindent Plotting in \texttt{knitr} is straightforward:
<<plotLinearModel, dependson ='doLinearModel', cache = TRUE>>=
plot(y~x)
abline(lm1)
@
\noindent This chunk will print a plot. Note the addition of the
option dependson = 'doLinearModel' - this option indicates that
some of the objects in plotLinearModel were created or modified
by the doLinearModel chunk. If changes are made to doLinearModel,
then the the plotLinearModel cache will be rebuilt too - this way,
each time code changes are made, the changes propagate through
subsequent pieces of code that depend on the modifications. The
plotting command have been placed in a seperate chunk from the
linear model fitting so that changes can be made to the plotting
code without affecting the cache that contains \texttt{x} and
\texttt{y} (this very important if the code in doLinearModel
takes a while to execute). The cached plots are saved into a
separate cache directory called 'figure'.\\
<<tableCoefficients, dependson ='doLinearModel', echo = FALSE, results = 'asis', cache = TRUE>>=
print(xtable(summary(lm1)$coefficients, align = 'l|cccc', digits = 3))
@
\noindent This final chunk will produce a table. Because printing
an \texttt{xtable} object results in a bit of latex code, we need
to supply the option results = 'asis' to tell knitr to treat the
output as such. Note in this chunk we have suppressed the printing of the code by using the echo = FALSE argument.
\end{document}
getwd()
setwd("~/Downloads/Decks/ch_pres")
require(slidify)
require(slidifyLibraries)
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
source('~/.active-rstudio-document', echo=TRUE)
slidify("index.Rmd")
source('~/.active-rstudio-document', echo=TRUE)
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
installed.packages()
slidify("index.Rmd")
slidify("index.Rmd")
publish(user="tbruning", repo = "ch_pres")
